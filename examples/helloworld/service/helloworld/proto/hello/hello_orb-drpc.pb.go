// Code generated by protoc-gen-go-orb. DO NOT EDIT.
//
// version:
// - protoc-gen-go-orb        v0.0.1
// - protoc                   v6.30.1
//
// source: hello/hello.proto

package hello_v1

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_hello_hello_proto struct{}

func (drpcEncoding_File_hello_hello_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_hello_hello_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_hello_hello_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_hello_hello_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_hello_hello_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCHelloServer interface {
	Hello(context.Context, *emptypb.Empty) (*HelloResponse, error)
}

type DRPCHelloUnimplementedServer struct{}

func (s *DRPCHelloUnimplementedServer) Hello(context.Context, *emptypb.Empty) (*HelloResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCHelloDescription struct{}

func (DRPCHelloDescription) NumMethods() int { return 1 }

func (DRPCHelloDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/hello.v1.Hello/Hello", drpcEncoding_File_hello_hello_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCHelloServer).
					Hello(
						ctx,
						in1.(*emptypb.Empty),
					)
			}, DRPCHelloServer.Hello, true
	default:
		return "", nil, nil, nil, false
	}
}

type DRPCHello_HelloStream interface {
	drpc.Stream
	SendAndClose(*HelloResponse) error
}

type drpcHello_HelloStream struct {
	drpc.Stream
}

func (x *drpcHello_HelloStream) GetStream() drpc.Stream {
	return x.Stream
}

func (x *drpcHello_HelloStream) SendAndClose(m *HelloResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_hello_hello_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
